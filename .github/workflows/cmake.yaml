name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Install ninja
      run: sudo apt-get install ninja-build

    - name: pstore Checkout
      uses: actions/checkout@v2
      with:
        repository: 'SNSystems/pstore.git'
        path: pstore
        ref: master

    - name: pstore Create Build Environment
      run: |
        cmake -E make_directory ${{ runner.workspace }}/pstore-build

    - name: pstore Configure
      shell: bash
      working-directory: ${{ runner.workspace }}/pstore-build
      run: |
        cmake -D CMAKE_BUILD_TYPE=Release -G Ninja $GITHUB_WORKSPACE/pstore

    - name: pstore Build
      working-directory: ${{ runner.workspace }}/pstore-build
      shell: bash
      run: cmake --build . --config Release

    - name: pstore Install
      working-directory: ${{ runner.workspace }}/pstore-build
      shell: bash
      run: sudo cmake --install .

    - name: http-client Checkout
      uses: actions/checkout@v2
      with:
        path: http-client

    - name: http-client Create Build Environment
      run: |
        cmake -E make_directory ${{github.workspace}}/build

    - name: http-client Configure
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        cmake -D CMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja $GITHUB_WORKSPACE/http-client

    - name: http-client Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: http-client Run
      working-directory: ${{github.workspace}}
      shell: bash
      run: ./test.js

